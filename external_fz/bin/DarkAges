#!/usr/bin/env python

import os
import sys
import optparse
import numpy as np
from numpy.random import randint

def cb_string(option, opt_str, value, parser):
	args=[]
	for arg in parser.rargs:
		if arg[0] != "-":
			args.append(arg)
		else:
			del parser.rargs[:len(args)]
			break
	if getattr(parser.values, option.dest):
		args.extend(getattr(parser.values, option.dest))
	setattr(parser.values, option.dest, args)

def cb_float(option, opt_str, value, parser):
	args=[]
	for arg in parser.rargs:
		if arg[0] != "-":
			args.append(float(arg))
		else:
			del parser.rargs[:len(args)]
			break
	if getattr(parser.values, option.dest):
		args.extend(getattr(parser.values, option.dest))
	setattr(parser.values, option.dest, args)

random_num = randint(1000)
root_path = os.path.split(os.path.dirname(os.path.realpath( __file__ )))[0]
sys.path.insert(0, root_path)

usage = "usage: %prog [options] [FILE] "
parser = optparse.OptionParser(usage=usage, version="%prog 0.5")

#verbose_group = optparse.OptionGroup(parser,'Verbose options')
#verbose_group.add_option("-q", "--quiet",
#                         action="store_const", const=0, default=1, dest="verbose")
#verbose_group.add_option("-v", "--verbose",
#                         action="store_const", const=1, dest="verbose")
#verbose_group.add_option("--noisy",
#                         action="store_const", const=2, dest="verbose")

#parser.add_option_group(verbose_group)
parser.add_option("-f", "--file", default = None, dest='script_file',
                  help="Use script file FILE")
parser.add_option("-s", "--specfile", default= None , metavar='SPECFILE', action="callback", callback=cb_string, dest = 'specfile',
                  help="Use the spectrum provided in SPECFILE")
parser.add_option("-b","--branching", metavar='BRANCHING', action='callback', callback=cb_float, dest = 'branchings',
                  help="If using more than one spectrum specify the branching ratio")
parser.add_option("-m","--model", dest='model', metavar='MODEL',
                  help="Load a preprocessed model")
parser.add_option("--rebuild_model", action='store_true', dest='rebuild_model', default=False,
                  help="Force rebuilding a model")
parser.add_option("--hist", default='annihilation', choices=['annihilation','decay','PBH','PBH2'], dest='injection_history',
                  help="Define the injection history of the model.")
parser.add_option("--mass", type="float", dest='mass',
                  help="Define the mass of the DM-candidate [in GeV].")
parser.add_option("--tdec", type='float', dest='t_dec',
                  help="Define the lifetime of the DM-candidate.")
parser.add_option("", "--cosmo_bg", dest="background", nargs=3, type="float", default=(67.27, 0.3156, 8e-5),
                  help="Define the background parameters (H0, Omega_m, Omega_r) for the calculation of H(z) and t(z)")

(options, args) = parser.parse_args()
if len(args) == 0:
    args = ''


os.environ['DARKAGES_BG_H0'] = '{}'.format(options.background[0])
os.environ['DARKAGES_BG_OM_M'] = '{}'.format(options.background[1])
os.environ['DARKAGES_BG_OM_R'] = '{}'.format(options.background[2])

from DarkAges import transfer_functions, logEnergies, redshift
from DarkAges.common import print_error, print_info
import DarkAges.recipes as recipes

if options.script_file:
	os.environ['DARKAGES_TOPLEVEL_PID'] = '{:d}'.format(os.getpid())
	os.environ['DARKAGES_TOPLEVEL_RANDN'] = '{:d}'.format(random_num)
	import dill
	with open(os.path.join( os.environ['DARKAGES_BASE'], 'pid_{:d}_{:d}'.format(os.getpid(), random_num )), 'wb') as options_dumper:
		dill.dump(options, options_dumper)

import atexit
@atexit.register
def goodbye():
	if options.script_file:
		try:
			os.remove( os.path.join( os.environ['DARKAGES_BASE'], 'pid_{:d}_{:d}'.format(os.getpid(), random_num )) )
		except OSError:
			pass

if options.injection_history == 'decay' and (options.t_dec==None):
	print_error('With choosing the injection history: "decay" you need to specify the lifetime of the DM-candidate with "--tdec"')

if options.injection_history == 'PBH':
	sys.exit( recipes.evaporating_PBH(options.mass, transfer_functions, logEnergies, redshift) )

if options.injection_history == 'PBH2':
	sys.exit( recipes.evaporating_PBH(options.mass, transfer_functions, logEnergies, redshift, merge_ion=True) )

if options.model:
	sys.exit( recipes.access_model(options.model, options.rebuild_model, args) )

if options.script_file:
	sys.exit( recipes.execute_script_file(options.script_file, args) )

if options.specfile:
	if not options.mass:
		print_error('In the mode "-s (--spec)"-mode, you nedd to specify the mass via the option: "--mass"')
	if not options.branchings:
		options.branchings = np.asarray([1.])
	else:
		options.branchings = np.asarray(options.branchings)
	try:
		assert abs(sum(options.branchings) - 1) <= 1e-5
	except AssertionError:
		print_error('The branching ratios do not add up to one')
	try:
		assert len(options.specfile) == len(options.branchings)
	except AssertionError:
		print_error('The number of spectra (== {:d}) and the number of branching ratios (== {:d}) do not match'.format(len(options.specfile),len(options.branchings)))

	if hasattr(options, 't_dec'):
		sys.exit( recipes.loading_from_specfiles(options.specfile, transfer_functions, logEnergies, redshift, options.mass, options.t_dec, options.injection_history, branchings=options.branchings) )
	else:
		sys.exit( recipes.loading_from_specfiles(options.specfile, transfer_functions, logEnergies, redshift, options.mass, np.inf, options.injection_history, branchings=options.branchings) )
