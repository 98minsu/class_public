*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*  CLASS input parameter file  *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

> This example of input file, intended for CLASS beginners, lists all possibilities with detailed comments. 
> You can use a more concise version, in which only the arguments in which you are interested would appear. 
> Only lines containing an equal sign not preceded by a sharp sign "#" are considered by the code. Hence, do not write an equal sign within a comment, the whole line would be interpreted as relevant input.
> Input files must have an extension ".ini".

----------------------------
----> background parameters:
----------------------------

1) Hubble parameter : either 'H0' in km/s/Mpc or 'h' (default: 'h' set to 0.704)

#H0 = 72.
h =0.7

2) photon density: either 'T_cmb' in K or 'Omega_g' or 'omega_g' (default: 'T_cmb' set to 2.726)

T_cmb = 2.726
#Omega_g = 5.050601e-05
#omega_g = 2.47479449e-5

3) baryon density: either 'Omega_b' or 'omega_b' (default: 'omega_b' set to 0.02253)

Omega_b = 0.05
#omega_b = 0.0266691

4) ultra-relativistic species / massless neutrino density: either 'N_eff' or 'Omega_nur' or 'omega_nur' (default: 'N_eff' set to 3.04)

N_eff = 3.04
#Omega_nur = 3.486966e-05
#omega_nur = 1.70861334e-5


5) density of various dark matter types: 

- for cdm: 'Omega_cdm' or 'omega_cdm' (default: 'omega_cdm' set to 0.1122)

Omega_cdm = 0.25
#omega_cdm = 0.110616

- for ncdm1: 'Omega_ncdm1' or 'omega_ncdm1' or 'M_ncdm1' (default: all set to zero)
	     'T_ncdm1'  (i.e. temperature of ncdm1 in units of photon temperature; default: set to 1) 
             'mu_ncdm1' (i.e. chemical potential of ncdm1 in units of its own temperature default: set to0) 

M_ncdm1 = 0.
#M_ncdm1 = 417
#Omega_ncdm1 = 0.0
T_ncdm1 = 0.7137658
ksi_ncdm1 = 0

6) curvature: 'Omega_k' (default: 'Omega_k' set to 0)

Omega_k = 0.

6) cosmological constant / dark energy fluid : enter one parameter out of 'Omega_Lambda' or 'Omega_de', and infer the other one so that (sum_i Omega_i) equals (1 + Omega_k) (default: 'Omega_de' set to 0 and 'Omega_Lambda' to (1+Omega_k-Omega_tot))

# Omega_Lambda = 0.7
Omega_de = 0

7) scale factor today 'a_today' (arbitrary and irrelevant for most purposes) (default: set to 1)

# a_today = 1.

--------------------------------
----> thermodynamics parameters:
--------------------------------

1) primordial Helium fraction 'YHe' (default: set to 0.25)

YHe = 0.25

2) parametrization of reionization: 'reio_parametrization' must be one of 'reio_none', 'reio_camb', ... (default: set to 'reio_camb')

reio_parametrization = reio_camb

3) if 'reio_parametrization' set to 'reio_camb': enter one of 'z_reio' or 'tau_reio' (default: 'z_reio' set to 10.3)

z_reio = 10.
#tau_reio = 0.084522

----------------------------------------------------
----> define which perturbations should be computed:
----------------------------------------------------

1) list of output spectra requested ('tCl' for temperature Cls, 'pCl' for polarization CLs, 'lCl' for lensing potential Cls, 'mPk' for total matter power spectrum P(k) infered from gravitational potential, 'mTk' for matter transfer functions for of each species). More than one letter allowed, can be attached or separated by arbitrary characters. Given this list, all non-zero auto-correlation and cross-correlation spectra will be automatically computed. Can be left blank if you do not want to evolve cosmological perturbations at all. (default: set to blanck, no perturbation calculation)

output = tCl,pCl,lCl
#output = tCl,pCl,lCl,mPk
#output = mPk,mTk

2) if you want the spectrum of lensed Cl's, enter a word containing the letter 'y' or 'Y' (default: no lensed Cl's)

lensing = yes

3) list of modes ('s' for scalars, 'v' for vectors, 't' for tensors). More than one letter allowed, can be attached or separated by arbitrary characters; letters can be small or capital. (default: set to 's')

modes = s
#modes = s,t

4) list of initial conditions for scalars ('ad' for adiabatic, 'bi' for baryon isocurvature, 'cdi' for CDM isocurvature, 'nid' for neutrino density isocurvature, 'niv' for neutrino velocity isocurvature). More than one of these allowed, can be attached or separated by arbitrary characters; letters can be small or capital. (defaut: set to 'ad')

ic = ad
#ic = ad&bi&nid

---------------------------------------------
----> define primordial perturbation spectra:
---------------------------------------------

1) primordial spectrum type ('analytic_Pk' for an analytic smooth function with amplitude, tilt, running, etc.; later, inflationary calculation will be added; analytic spectra with feature can also be added as a new type) (default: set to 'analytic_Pk')

P_k_ini type = analytic_Pk

2) parameters related to one of the primordial spectrum types (will only be read if they correspond to the type selected above)

2.a) for type 'analytic_Pk':

2.a.1) pivot scale in Mpc-1 (default: set to 0.002)

k_pivot = 0.05

2.a.2) scalar adiabatic perturbations: curvature power spectrum value at pivot scale, tilt at the same scale, and tilt running (default: set 'A_s' to 2.42e-9, 'n_s' to 0.967, 'alpha_s' to 0)

A_s = 2.3e-9
n_s = 1.
alpha_s = 0.

2.a.3) isocurvature/entropy perturbations: for each mode xx ('xx' being one of 'bi', 'cdi', 'nid', 'niv', corresponding to baryon, cdm, neutrino density and neutrino velocity entropy perturbations), enter the entropy-to-curvature ratio f_xx, tilt n_xx and running alpha_xx, all defined at the pivot scale; e.g. f_cdi of 0.5 means S_cdi/R equal to one half and (S_cdi/R)^2 to 0.25 (default: set each 'f_xx' to 1, 'n_xx' to 1, 'alpha_xx' to 0)

f_bi = 1.
n_bi = 1.5

f_cdi=1.

f_nid=1.
n_nid=2.
alpha_nid= 0.01

etc.

2.a.4) cross-correlation between different adiabatic/entropy mode: for each pair (xx, yy) where 'xx' and 'yy' are one of 'ad', 'bi', 'cdi', 'nid', 'niv', enter the correlation c_xx_yy (parameter between -1 and 1, standing for cosDelta, the cosine of the cross-correlation angle), the tilt n_xx_yy of the function cosDelta(k), and its running alpha_xx_yy, all defined at the pivot scale. So, for a pair of fully correlated (resp. anti-correlated) modes, one should set (c_xx_yy, n_xx_yy, alpha_xx_yy) to (1,0,0) (resp. (-1,0,0) (default: set each 'c_xx_yy' to 0, 'n_xx_yy' to 0, 'alpha_xx_yy' to 0)

c_ad_bi = 0.5
#n_ad_bi = 0.1

c_ad_cdi = -1.

c_bi_nid = 1.
#n_bi_nid = -0.2
#alpha_bi_nid = 0.002

etc.

2.a.5) tensor mode (if any): tensor-to-scalar power spectrum ratio, tilt, running at the pivot scale (default: set 'r' to 1, 'n_t' to 0, 'alpha_t' to 0)

r = 1.
n_t = 0.
alpha_t = 0.

-------------------------------------
----> define format of final spectra:
-------------------------------------

1) maximum l 'l_max_scalars', 'l_max_tensors' in Cls for scalars/tensors (default: set 'l_max_scalars' to 2500, 'l_max_tensors' to 500)

l_max_scalars = 3000
l_max_tensors = 500

2) maximum k in P(k). If scalar Cls are also requested, a minimum value is automatically imposed (the same as in scalar Cls computation) (default: set to 0.1)

P_k_max = 1000.

3) value(s) 'z_pk' of redshift(s) for P(k,z) output file(s); can be ordered arbitrarily, but must be separated by comas (default: set 'z_pk' to 0)

z_pk = 0
#z_pk = 0., 1.2, 3.5

4) if the code is interfaced with routines that need to interpolate P(k,z) at various values of (k,z), enter 'z_max_pk', the maximum value of z at which such interpolations are needed. (default: set to maximum value in above 'z_pk' input)

#z_max_pk = 10.

5) file name root 'root' for all output files (default: set 'root' to 'output/') (if Cl requested, written to '<root>cl.dat'; if P(k) requested, written to '<root>pk.dat'; plus similar files for scalars, tensors, pairs of initial conditions, etc.; if file with input parameters requested, written to '<root>parameters.ini')

root = output/test_

5) if 'bessel file' set to something containing the letters 'y' or 'Y', the code tries to read bessel functions in a file; if the file is absent or not adequate, bessel functions are computed and written in a file. The file name is set by defaut to 'bessels.dat' but can be changed together with precision parameters: just set 'bessel_file_name' to '<name>' either here or in the precision parameter file. (defaut: 'bessel file' set to 'no' and bessel functions are always recomputed)

bessel file = yes

6) Do you want to have all input/precision parameters which have been read written in file '<root>parameters.ini' ? If 'write parameters' set to something containing the letter 'y' or 'Y', file written, otherwise not written (default: not written)

write parameters = yeap

----------------------------------------------------
----> amount of information sent to standard output:
----------------------------------------------------

Increase integer values to make each module more talkative (default: all set to 0)

background_verbose = 1
thermodynamics_verbose = 1
perturbations_verbose = 2
bessels_verbose = 1
transfer_verbose = 2
primordial_verbose = 1
spectra_verbose = 1
lensing_verbose = 1
output_verbose = 1

#tight_coupling_trigger_eta_g_over_eta_k=1.e-3
#tight_coupling_trigger_eta_g_over_eta_h=3.e-3
#rad_pert_trigger_k_over_aH=40.
#tight_coupling_approximation=3

# early:
#start_small_k_at_eta_g_over_eta_h = 1.e-6
#start_large_k_at_eta_g_over_eta_k = 0.05e-6
#tight_coupling_trigger_eta_g_over_eta_h=0.0006
#tight_coupling_trigger_eta_g_over_eta_k=0.0015

# late:
#start_small_k_at_eta_g_over_eta_h = 1.e-5
#start_large_k_at_eta_g_over_eta_k = 0.05e-5
#tight_coupling_trigger_eta_g_over_eta_h=0.006
#tight_coupling_trigger_eta_g_over_eta_k=0.015
